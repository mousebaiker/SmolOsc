syntax = "proto3";

// Next field: 10
message SimulationConfiguration {
  // Name of simulation experiment.
  string simulation_name = 1;

  enum KernelType {
    UNKNOWN = 0;
    CONSTANT = 1;
    MULTIPLICATION = 2;
    BALLISTIC = 3;
    BROWNIAN = 4;
  }

  // Type of aggregation-fragmentation kernel.
  KernelType kernel_type = 2;

  // Parameters used only by specific kernels.
  oneof kernel_params {
    BrownianKernelParams brownian_kernel_params = 8;
  }

  // Fragmentation rate for particles. Will be compared to the aggregation rate
  // of 1.0.
  float fragmentation_rate = 3;

  // Parameters controling initialization process of particle distribution. 
  InitialConditions initial_conditions = 9;

  // Duration of the simulation measured in the internal simulation units.
  float duration = 5;

  // Options defining how simulation will be saved.
  SaveOptions save_options = 6;

  // Options defining how simulation will be started from checkpoint.
  // Initial conditions will be ignored if load_options is present.
  LoadOptions load_options = 7;
}

// Next field: 3
message InitialConditions {
  enum DistributionType {
    UNKNOWN = 0;
    // Distribute particles over smallest N sizes uniformly.
    SMALLEST_N = 1;
  }
  
  // Type of distribution used for initialization of particles.
  DistributionType distribution_type = 1;
  
  // Parameters used only by specific distributions.
  oneof distribution_params {
    SmallestNParams smallest_n_params = 2;
  }
}

message SaveOptions {
  // Interval between save checkpoints.
  // Measured in the internal simulation time.
  float checkpoint_interval = 1;

  // Output directory that will contain checkpoints.
  string output_dir = 2;
}

message LoadOptions {
  // Path to a checkpoint from which simulation will be restarted.
  string checkpoint_path = 1;
}

message BrownianKernelParams {
  // Exponent value of brownian kernel.
  float alpha = 1;
}

message SmallestNParams {
  // Number of particles used to initialize each size.
  int64 particle_count_for_each_size = 1;
  
  // Number of smallest N sizes that will be initialized.
  int64 num_sizes = 2;
}
